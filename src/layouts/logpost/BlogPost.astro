---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Body from "../Body.astro";
import GoBack from "../../components/GoBack.astro";

import LdHead from '../../components/LdHead.astro';
import {Navbar} from '../../components/Navbar';
import Footer from '../../components/Footer.astro';
import TagPill from '../../components/TagPill.astro';
import Heading from "../../markdoc/nodes/Heading.astro";
import { Image } from 'astro:assets';
import {getLogsFromSeries} from "../../utils/logs";
import SeriesComponent from "../../components/Series.astro";

import {blogHeroImage} from "./blogpost.css"


export type Props = CollectionEntry<'article'> & { minuteRead: number, lastModified: Date };

const { data: {description, pubDate, heroImage, tags, furtherReading, partOfSeries}, id, lastModified } = Astro.props as Props;

if (!pubDate && process.env.NODE_ENV === "production") throw new Error("Missing pubDate");

let title = id.replaceAll("-", " ");
title = title.charAt(0).toUpperCase() + title.slice(1);

let series: {series: CollectionEntry<"article">[], currentLogIndex: number} | null = null;

if (!!partOfSeries) {
  const logs = await getLogsFromSeries(partOfSeries);
  series = {series: logs, currentLogIndex: logs.findIndex(log => log.id === id)};
}
---

<style lang="scss">
  article {
    display: flex;
    flex-direction: column;
    gap: calc(7 * 0.25rem);
  }

  #goback-btn-wrapper {
    margin-block: calc(11 * 0.25rem);
  }

  article .header {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    .header-bar {
      display: flex;
      justify-content: space-between;
      color: var(--gray-11);
    }
  }
  h1 {
    color: var(--blue-10);
    font-weight: 800;
    text-align: left;
    font-size: 2.25rem;
  }

  .under-title-bar {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
  }

  .description {
    color: var(--gray-11);
    max-width: 45ch;
    text-align: left;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    max-width: 300px;
    gap: 0.75rem;
    align-items: center;

  }
</style>

<html lang="en">
	<head>
    <BaseHead title={title} description={description} image={heroImage?.dark.src} />

    {/* @ts-ignore throwing error if this fails IN PROD */}
    {process.env.NODE_ENV==="production" && <LdHead title={title} description={description} image={heroImage?.dark.src} pubDate={pubDate} />}
    <link rel="stylesheet" href="/css/article.css" />
	</head>
  <Body>
    <Navbar overrideTitle="VT's dev log" />
    <div id="goback-btn-wrapper" class="no-print">
      <GoBack href="/logs" overrideText='All posts' />
    </div>
    <article>
      <div class="header">
        <div class="header-bar">
          <div class="flex flex-col gap-1">
            <p>{pubDate ? <>Published <FormattedDate date={pubDate} /></> : "Private draft"}</p>
            {pubDate != lastModified && (
              <p class="mt-1">
                Last updated <FormattedDate date={lastModified} />
              </p>
            )}
          </div>
        </div>
      </div>
        {heroImage && (
          <figure class="flex flex-col gap-2">
            <Image widths={[852, 600, 400]} src={heroImage.dark} loading="eager" alt={heroImage.alt} class={blogHeroImage({forTheme: "dark"})}  />
            <Image widths={[852, 600, 400]} src={heroImage.light} loading="eager" alt={heroImage.alt} class={blogHeroImage({forTheme: "light"})}  />
            <figcaption class="self-end text-[var(--gray-11)] mr-4">{heroImage.alt}</figcaption>
          </figure>
        )}
      <h1>{title}</h1>
      <div class="under-title-bar">
        <p class="description">{description}</p>
        <div class="tags no-print">
          {tags.map(tag => <TagPill href={`/logs/tags/${tag}`}>{tag}</TagPill>)}
        </div>
      </div>
      <hr class="no-print" />
      {!!series && <SeriesComponent series={series.series} currentIndex={series.currentLogIndex} />}
      <div class="my-content">
        <slot/>
        {!!furtherReading && (
          <Heading level={2} id="further-reading">Further reading</Heading>
          <p>
            These articles allow for further reading of the same topic, and may be relevant:
            <ul>
              {furtherReading.map(({url, title}) => (
                <li><a href={url} target="_blank">{title}</a></li>
              ))}
            </ul>
          </p>
        )}
      </div>
      <style is:global>
        /*KaTeX plugin needs this*/
        *[aria-hidden="true"] {
          display: none;
        }
      </style>
    </article>
    <Footer />
  </Body>
</html>
